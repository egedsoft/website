# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  imageRepo: guywizards
  imageName: test-website
  tag: '$(Build.BuildId)'
  k8sNamespace: default  
  vmImageName: ubuntu-latest
  namespace: default
stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'guywizards-docker-hub'
        repository: '$(imageRepo)/$(imageName)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(tag)
          latest
      


- stage: Provision
  displayName: 'Terraforming on Azure...'
  dependsOn: Build
  jobs:
  - job: Provision
    displayName: 'Provisioning Container Instance'
    pool:
      vmImage: $(vmImageName)
    variables: 
    - group: TeraformEnvVars
    steps:
    - script: |
        set -e
        terraform init -input=false
        terraform apply -input=false -auto-approve
      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        # TF_VAR_imagebuild: $(tag)

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/kubernetes'
        artifact: 'manifests'
        publishLocation: 'pipeline'  


- stage: Deploy 
  displayName: Deploy to Dev
  dependsOn: Provision
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'aks1.default'
    pool:
      vmImage: $(vmImageName)
    strategy: 
      runOnce:
        deploy:
          steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  inputs:
                    action: 'deploy'
                
                    #kubernetesServiceConnection: 'aks.default'
                    namespace: $(namespace)
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment.yaml
                      $(Pipeline.Workspace)/manifests/service.yaml





# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy job
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'azooinmyluggagepipelinesjavascriptdocker.aksnamespace'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: DownloadPipelineArtifact@2
#             inputs:
#               artifactName: 'manifests'
#               downloadPath: '$(System.ArtifactsDirectory)/manifests'

#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               namespace: $(k8sNamespace)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               namespace: $(k8sNamespace)
#               manifests: |
#                 $(System.ArtifactsDirectory)/manifests/deployment.yml
#                 $(System.ArtifactsDirectory)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)